//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,
//  NOTIFY=&SYSUID
//*
//*      *************************************************************
//*      *                                                           *
//*      * Job name: STAPSRPT                                        *
//*      *                                                           *
//*      * Purpose:  Extract PS records where and produce reports.   *
//*      *                                                           *
//*      * Date Written: October 2020.                               *
//*      *                                                           *
//*      * Programmer:   John Bradley.                               *
//*      *                                                           *
//*      * Copyright (c) Meerkat Computer Services Limited.          *
//*      *                                                           *
//*      *************************************************************
//*
//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB
//*
//           EXPORT  SYMLIST=(DTE)
//           SET     DTE=&LYYMMDD
//*
//INCLUDE1   INCLUDE MEMBER=CDPARMS
//*
//*      *************************************************************
//*      *                                                           *
//*      * Execute C:D in batch to extract process termination recs  *
//*      * from yesterday.                                           *
//*      *                                                           *
//*      *************************************************************
//*
//STEP1       EXEC  CDJCL
//TEMPDSN     DD    DSN=&&TEMPDSN,
//            DISP=(NEW,PASS),
//            UNIT=3390,
//            SPACE=(CYL,(100,100),RLSE),
//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)
//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY
  SIGNON TMPDD=TEMPDSN
  SELECT STATISTICS                                       -
         WHERE (TYPE=PS                                   -
         EXCLUDE=(WTO,MEMB)) FILE
  SIGNOFF
/*
//*
//*      *************************************************************
//*      *                                                           *
//*      * We execute DFSORT to extract fields we require for        *
//*      * processing by REXX reformatting program STAPSREX.         *
//*      *                                                           *
//*      *************************************************************
//*
//STEP2       EXEC  PGM=SORT
//SORTIN      DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)
//SORTOUT     DD    DSN=&&REXXIN,
//            DISP=(NEW,PASS),
//            UNIT=3390,
//            SPACE=(CYL,(100,100),RLSE),
//            DCB=(DSORG=PS,RECFM=FB,LRECL=208,BLKSIZE=0)
//SYSOUT      DD    SYSOUT=*
//SYSIN       DD    *,SYMBOLS=JCLONLY
*
* Extract required fields.
*
  OPTION COPY,VLSHRT
*
* Extract date.
*
* Next we have to extract and format the time field, Unfortunately
* this is complicated by the fact that the time in the statistics
* records is stored as a fullword value in hex but using decimal.
*
* So for example if the time the record was recorded was 23:01:10:53
* we would have four bytes with each nibble being a character. So:-
*
* Byte 1 - Bits 1 - 4 = 2
* Byte 1 - Bits 5 - 8 = 3
* Byte 2 - Bits 1 - 4 = 0
* Byte 2 - Bits 5 - 8 = 1
* Byte 3 - Bits 1 - 4 = 1
* Byte 3 - Bits 5 - 8 = 0
* Byte 4 - Bits 1 - 4 = 5
* Byte 4 - Bits 5 - 8 = 3
*
* This complicates extraction because we cannot just reformat the
* data using built-in formats.
*
* What we need to do is manipulate each nibble so we end up with
* an 8 byte ZONED DECIMAL containing the time.
*
* To do this we need to work on each byte twice. First we use DIV
* to divide the first four bits of the byte and then add 240 to it
* to get the zoned decimal value. In this case we change 2 in bits 1-4
* to be two a single byte containing F2.
*
* We use 240 because it is x'F0' so we can get a zoned decimal field.
*
* Next we use MOD to get the remainder of the first byte and add 240 to it.
* This extracts the last 4 bits of the byte and turns it into F3 for us.
*
* We perform the same operation on each byte and end up with the
* following:-
*
* F2F3F0F1F1F0F5F3
*
* We now have zoned decimal values that can be changed for display.
*
  OUTFIL  OUTREC=(1:9,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,
                  2:9,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,
                  3:10,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,
                  4:10,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,
                  5:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,
                  6:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,
                  7:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,
                  8:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,
                  13,4,                * - Date            9-12
                  29,8,                * - Error Message   12-19
                  37,8,                * - Process name    20-27
                  45,4,                * - Process number  28-31
                  137,16,              * - Primary node    32-46
                  153,16,              * - Secondary node  47-62
                  25,4,                * - Cond Code       63-56
                  73,64,               * - Userid          57-120
                  330,76),VTOF         * - Rest            121-196
/*
//*
//*      *************************************************************
//*      *                                                           *
//*      * We then execute REXX in batch to tailor records as they   *
//*      * are not in the correct format to extract data we need.    *
//*      *                                                           *
//*      *************************************************************
//*
//STEP3       EXEC  PGM=IRXJCL,PARM='STAPSREX'
//INPUT       DD    DSN=&&REXXIN,DISP=(OLD,DELETE)
//OUTPUT      DD    DSN=&&REXXOUT,
//            DISP=(NEW,PASS),
//            UNIT=3390,
//            SPACE=(CYL,(100,100),RLSE),
//            DCB=(DSORG=PS,RECFM=FB,LRECL=208,BLKSIZE=0)
//SYSEXEC     DD    DSN=&STACNTL,DISP=SHR
//SYSTSPRT    DD    SYSOUT=*
//SYSTSIN     DD    DUMMY
//*
//*      *************************************************************
//*      *                                                           *
//*      * We then execute ICETOOL to produce the various formatted  *
//*      * data required.                                            *
//*      *                                                           *
//*      *************************************************************
//*
//STEP3       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)
//TOOLMSG     DD    SYSOUT=*
//DFSMSG      DD    SYSOUT=*
//INDD1       DD    DSN=&&REXXOUT,DISP=(OLD,DELETE)
//OUTDD1      DD    DSN=&&OUTDD1,
//            DISP=(NEW,PASS),
//            UNIT=3390,
//            SPACE=(CYL,(100,10),RLSE),
//            DCB=(RECFM=FB,LRECL=208,BLKSIZE=0,DSORG=PS)
//OUTDD2      DD    DSN=&HLQSTAT..PSRPT1.D&DTE,
//            DISP=(MOD,CATLG),
//            UNIT=3390,
//            SPACE=(CYL,(100,10),RLSE),
//            DCB=(RECFM=FB,LRECL=217,BLKSIZE=0,DSORG=PS)
//OUTDD3      DD    DSN=&HLQSTAT..PSRPT2.D&DTE,
//            DISP=(NEW,CATLG),
//            UNIT=3390,
//            SPACE=(CYL,(100,10),RLSE),
//            DCB=(RECFM=FB,LRECL=217,BLKSIZE=0,DSORG=PS)
//OUTDD4      DD    DSN=&HLQSTAT..PSRPT3.D&DTE,
//            DISP=(NEW,CATLG),
//            UNIT=3390,
//            SPACE=(CYL,(100,10),RLSE),
//            DCB=(RECFM=FB,LRECL=217,BLKSIZE=0,DSORG=PS)
//*
//*      *************************************************************
//*      *                                                           *
//*      * SRTxCNTL statements are used to format the statistics     *
//*      * into the various reports we require.                      *
//*      *                                                           *
//*      *************************************************************
//*
//SRT1CNTL    DD    *,SYMBOLS=JCLONLY
*
* Extract required fields. using the '/' fields added by STAPSREX as
* delimiters.
*
* This result sin the variable field at byte 134 being placed at the
* end of the record as a fixed 58 byte field.
*
  SORT  FIELDS=(13,8,CH,A,9,4,PD,A,1,8,ZD,A)
  INREC IFTHEN=(WHEN=INIT,
                PARSE=(%01=(ABSPOS=135,ENDBEFR=C'/',FIXLEN=58),
                       %02=(ENDBEFR=C'/',FIXLEN=8),
                       %03=(ENDBEFR=C'/',FIXLEN=8)),
                BUILD=(1,134,%02,%03,%01))
  OUTFIL  OUTREC=(1,208)
/*
//SRT2CNTL    DD    *,SYMBOLS=JCLONLY
*
* Extract required fields.
*
  OPTION COPY
  OUTFIL OUTREC=(1,121,96X)
//*
//*      *************************************************************
//*      *                                                           *
//*      * TOOLIN directs ICETOOL to perform various pieces of       *
//*      * processing to create records and reports we require.      *
//*      *                                                           *
//*      *************************************************************
//*
//TOOLIN      DD    *,SYMBOLS=JCLONLY
*
* Mode for operations is to fail if any errors occur.
*
 MODE    STOP
 SORT    FROM(INDD1)     TO(OUTDD1)    USING(SRT1)
 DISPLAY FROM(OUTDD1)    LIST(OUTDD2)                                -
         TITLE('Daily C:D Process Submit Report')                    -
         DATE(DMY-)                                                  -
         TIME(24:)                                                   -
         PAGE                                                        -
         BLANK                                                       -
         HEADER('Message ID')      ON(13,8,CH)                       -
         HEADER('Date    ')        ON(9,4,PD,E'9999.999')            -
         HEADER('Time    ')        ON(1,8,ZD,E'99;99:99:99')         -
         HEADER('Process ')        ON(21,8,CH)                       -
         HEADER('Procnum ')        ON(29,4,BI)                       -
         HEADER('CondCode')        ON(65,4,BI)                       -
         HEADER('Primary Node ')   ON(33,16,CH)                      -
         HEADER('Secondary Node ') ON(49,16,CH)                      -
         HEADER('Userid ')         ON(69,8,CH)                       -
         HEADER('Job/Task Name')   ON(135,8,CH)                      -
         HEADER('Job/Task No. ')   ON(143,8,CH)                      -
         HEADER('Submitted From')  ON(151,58,CH)
*
 DISPLAY FROM(OUTDD1)    LIST(OUTDD3)                                -
         TITLE('Daily C:D Process Submit Report')                    -
         DATE(DMY-)                                                  -
         TIME(24:)                                                   -
         PAGE                                                        -
         BLANK                                                       -
         BTITLE('Report BY MESSAGE ID: ')     BREAK(13,8,CH)          -
         HEADER('Message ID')      ON(13,8,CH)                       -
         HEADER('Date    ')        ON(9,4,PD,E'9999.999')            -
         HEADER('Time    ')        ON(1,8,ZD,E'99;99:99:99')         -
         HEADER('Process ')        ON(21,8,CH)                       -
         HEADER('Procnum ')        ON(29,4,BI)                       -
         HEADER('CondCode')        ON(65,4,BI)                       -
         HEADER('Primary Node ')   ON(33,16,CH)                      -
         HEADER('Secondary Node ') ON(49,16,CH)                      -
         HEADER('Userid ')         ON(69,8,CH)                       -
         HEADER('Job/Task Name')   ON(135,8,CH)                      -
         HEADER('Job/Task No. ')   ON(143,8,CH)                      -
         HEADER('Submitted From')  ON(151,58,CH)
*
 OCCUR   FROM(OUTDD1)    LIST(OUTDD4) BLANK                          -
         TITLE('Message Summary')                                    -
         HEADER('Message')                                           -
         HEADER('Occurrences')                                       -
         ON(13,8,CH)                                                 -
         ON(VALCNT)
*
 COPY    FROM(OUTDD4) TO(OUTDD2)   USING(SRT2)
/*
//
