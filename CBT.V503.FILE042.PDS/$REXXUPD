/* REXX */

/*
  Amend before execution by changing:-

  ds='' to ds='name of pds where this exec resides'
  ct.1='' to cf.1='sname where I have created CDPARMS'

  So for example if STA* members are in JXB.CNTL and $REXXUPD is in
  JXB.CNTL and your CDPARMS reside in MY.PROCLIB you would code:-

  ds='JXB.CNTL'
  ct.1='MY.PROCLIB'

*/

 ds=''                                 /* Input Dataset Name.       */
 xdd=''                                /* Nullify xdd variable.     */
 flag=''                               /* Nullify flag variable.    */
 chgcnt=0                              /* Set counter.              */

 cf.1='SUPPLIED.PROCLIB'               /* Change from this...       */
 cf.0=1                                /* Set index to 1.           */
 ct.1=''       '                       /* Change to this....        */

/* Check if dataset is ok and if not then call XIT routine
   passing dataset name and message from SYSDSN.
*/

 if sysdsn("'"ds"'")<>'OK' then call xit ds sysdsn("'"dsq"'")

 zz=outtrap('mls.')                    /* Set outtrap mls. stem     */

/*
 LISTDS all members from supplied dataset.
*/

 "listds '"ds"' members"               /* Issue TSO LISTDS          */
 zz=outtrap('off')                     /* Turn OUTRAP off.          */

/*
  Set alp variable to RTDDN(XDD) which is a parameter of the
  UNIX BPXWDYN routine.
*/

 alp='rtddn(xdd)'

/*
 We start to loop through messages returned from LISTDS. We start at
 record 7 which is the first member name. Lines 1 to 6 contain
 dataset header information.
*/

   flag = 0
 do mln=7 to mls.0                     /* Begin loop from 7.        */
   cn=0                                /* Set cn to 0.              */
   mbr=strip(mls.mln)                  /* Remove any spaces.        */

/*
 Only process members that start with STA for this dataset.
*/

   if substr(mbr,1,3) = 'STA' then
    do

/*
 Call BPXWDYN UNIX dynamic allocation routine. ALP requests
 RTDDN(XDD) that XDD contains the returned dynamic allocation dataset
 name.
*/

     cc=Bpxwdyn('alloc da('ds'('mbr')) shr' alp)

/*
 If we get error call XIT and pass info on error.
*/

     if cc<>0 then call xit 'alloc' ds 'rc' cc

/*
 Set alp to the dynamic ddname for processing.
 Then read member into stack.
*/

     alp='dd('xdd') reuse'

     data. = ''
     "execio * diskr" xdd "(stem data. finis)"

/* Check read was good and if not go to XIT and issue error. */

     if rc<>0 then call xit 'read' ds'('mbr')' 'rc' rc
     do di=1 to data.0                 /* Read each line of the mbr. */
      do cfn=1 to cf.0                 /* Start loop.               */
       cf=cf.cfn                       /* Set change from.          */
       ct=ct.cfn                       /* Set change to.            */

/* Get value to change. */

       parse value ' 'strip(data.di,'t')' ' with front (cf) back

/* If back is 0 then get next one. */

       if length(back)=0 then iterate

 /* Tell user it looke dlike this... */

       say 'BPDS002I: ' mbr 'before:' data.di
       data.di=substr(front''ct''back,2)

 /* Then tell them it will look like this... */

       say 'BPDS003I: ' mbr 'after: ' data.di
       cn=cn+1                         /* Bump line count.           */
      end                              /* Loop round.                */
    end /* End loop.                  */

   if cn=0 then iterate                /* Count finished iterate.    */

/* Update changed member.                                            */

   "execio * diskw" xdd "(stem data. finis)"

/* If write fails go off and tell user.                             */

   If rc<>0 then call xit 'write' ds'('mbr')' 'rc' rc

/* If write ok then issue message saying changed.                   */

   say 'BPDS004I: Changes completed for member  - ' mbr
   chgcnt = chgcnt + 1
   flag = 1

/* Next we update ISP stats.                                       */

   address ispexec "lminit dataid(did) dataset('"ds"') enq(shr)"

   if rc<>0 then call xit 'lminit rc' rc

   address ispexec "lmmstats dataid("did") member("mbr")"

   if rc<>0 then call xit 'LMMStats rc' rc zerrlm

   address ispexec "lmfree dataid("did")"
 end
end

 If flag = 0 then
  Call xit 'BPDS001I - No change made no strings found'
 else
  Call xit 'BPDS999I - Changes complete, changes made '||chgcnt

exit 0

XIT:
 if arg(1)<>'' then say arg(1)
 if xdd<>'' then zz=Bpxwdyn('free dd('xdd')')
 exit word(arg(2) 0,1)
