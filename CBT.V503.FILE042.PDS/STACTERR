//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,
//  NOTIFY=&SYSUID
//*
//*      *************************************************************
//*      *                                                           *
//*      * Job name: STACTERR.                                       *
//*      *                                                           *
//*      * Purpose:  Extract CT records where CC>0 and produce       *
//*      *           error message reports.                          *
//*      *                                                           *
//*      * Date Written: October 2020.                               *
//*      *                                                           *
//*      * Programmer:   John Bradley.                               *
//*      *                                                           *
//*      * Copyright (c) Meerkat Computer Services Limited.          *
//*      *                                                           *
//*      *************************************************************
//*
//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB
//*
//           EXPORT  SYMLIST=(DTE)
//           SET     DTE=&LYYMMDD
//*
//INCLUDE1   INCLUDE MEMBER=CDPARMS
//*
//*      *************************************************************
//*      *                                                           *
//*      * Execute C:D in batch to extract copy termination records  *
//*      * from yesterday.                                           *
//*      *                                                           *
//*      *************************************************************
//*
//STEP1       EXEC  CDJCL
//TEMPDSN     DD    DSN=&&TEMPDSN,
//            DISP=(NEW,PASS),
//            UNIT=3390,
//            SPACE=(CYL,(100,100),RLSE),
//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)
//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY
  SIGNON TMPDD=TEMPDSN
  SELECT STATISTICS                                       -
         WHERE (TYPE=CT CCODE=(GT,0)                      -
         STARTT=(YESTER)                                  -
         STOPT=(YESTER)                                   -
         EXCLUDE=(WTO,MEMB)) FILE
  SIGNOFF
/*
//*
//*      *************************************************************
//*      *                                                           *
//*      * We then execute ICETOOL to produce the various formatted  *
//*      * data required.                                            *
//*      *                                                           *
//*      *************************************************************
//*
//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)
//TOOLMSG     DD    SYSOUT=*
//DFSMSG      DD    SYSOUT=*
//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)
//OUTDD1      DD    DSN=&&OUTDD1,
//            DISP=(NEW,PASS),
//            UNIT=3390,
//            SPACE=(CYL,(100,10),RLSE),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)
//OUTDD2      DD    DSN=&HLQSTAT..ERPT1.D&DTE,
//            DISP=(MOD,CATLG),
//            UNIT=3390,
//            SPACE=(CYL,(100,10),RLSE),
//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)
//OUTDD3      DD    DSN=&HLQSTAT..ERPT2.D&DTE,
//            DISP=(NEW,CATLG),
//            UNIT=3390,
//            SPACE=(CYL,(100,10),RLSE),
//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)
//OUTDD4      DD    DSN=&HLQSTAT..ERPT3.D&DTE,
//            DISP=(NEW,CATLG),
//            UNIT=3390,
//            SPACE=(CYL,(100,10),RLSE),
//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)
//*
//*      *************************************************************
//*      *                                                           *
//*      * SRTxCNTL statements are used to format the statistics     *
//*      * into the various reports we require.                      *
//*      *                                                           *
//*      *************************************************************
//*
//SRT1CNTL    DD    *,SYMBOLS=JCLONLY
*
* Extract required fields.
*
  SORT FIELDS=(29,8,CH,A,13,4,PD,A,9,4,BI,A)
*
* Extract date.
*
* Next we have to extract and format the time field, Unfortunately
* this is complicated by the fact that the time in the statistics
* records is stored as a fullword value in hex but using decimal.
*
* So for example if the time the record was recorded was 23:01:10:53
* we would have four bytes with each nibble being a character. So:-
*
* Byte 1 - Bits 1 - 4 = 2
* Byte 1 - Bits 5 - 8 = 3
* Byte 2 - Bits 1 - 4 = 0
* Byte 2 - Bits 5 - 8 = 1
* Byte 3 - Bits 1 - 4 = 1
* Byte 3 - Bits 5 - 8 = 0
* Byte 4 - Bits 1 - 4 = 5
* Byte 4 - Bits 5 - 8 = 3
*
* This complicates extraction because we cannot just reformat the
* data using built-in formats.
*
* What we need to do is manipulate each nibble so we end up with
* an 8 byte ZONED DECIMAL containing the time.
*
* To do this we need to work on each byte twice. First we use DIV
* to divide the first four bits of the byte and then add 240 to it
* to get the zoned decimal value. In this case we change 2 in bits 1-4
* to be two a single byte containing F2.
*
* We use 240 because it is x'F0' so we can get a zoned decimal field.
*
* Next we use MOD to get the remainder of the first byte and add 240 to it.
* This extracts the last 4 bits of the byte and turns it into F3 for us.
*
* We perform the same operation on each byte and end up with the
* following:-
*
* F2F3F0F1F1F0F5F3
*
* We now have zoned decimal values that can be changed for display.
*
* Our output record will look like this:-
*
* Columns     Content
*
* 1-4         Date in packed decimal format.
* 5-8         Unused
* 9-16        Time in zoned decimal format.
* 17-20       Process name in character format.
* 25-28       Process number in binary format.
* 29-44       C:D node name in character format.
* 45-52       Bytes sent in binary format.
* 53-60       Bytes recv in binary format.
* 61-64       Condition code in binary format.
*
  OUTFIL  OUTREC=(13,4,                * - Date            1-4
                  29,8,                * - Error Message   5-12
                  13:9,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,
                  14:9,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,
                  15:10,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,
                  16:10,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,
                  17:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,
                  18:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,
                  19:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,
                  20:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,
                  37,8,                * - Process name    21-28
                  45,4,                * - Process number  29-32
                  97,16,               * - CD Node         33-48
                  25,4,                * - Cond Code       49-52
                  28X),VTOF
/*
//SRT2CNTL    DD    *,SYMBOLS=JCLONLY
*
* Extract required fields.
*
  OPTION COPY
  OUTFIL OUTREC=(1,121)
//*
//*      *************************************************************
//*      *                                                           *
//*      * TOOLIN directs ICETOOL to perform various pieces of       *
//*      * processing to create records and reports we require.      *
//*      *                                                           *
//*      *************************************************************
//*
//TOOLIN      DD    *,SYMBOLS=JCLONLY
*
* Mode for operations is to fail if any errors occur.
*
 MODE   STOP
 SORT    FROM(INDD1)     TO(OUTDD1)    USING(SRT1)
 DISPLAY FROM(OUTDD1)    LIST(OUTDD2)                                -
         TITLE('Daily C:D Error Message Report')                     -
         DATE(DMY-)                                                  -
         TIME(24:)                                                   -
         PAGE                                                        -
         BLANK                                                       -
         HEADER('Error Message')   ON(5,8,CH)                        -
         HEADER('Date    ')        ON(1,4,PD,E'9999.999')            -
         HEADER('Time    ')        ON(13,8,ZD,E'99:99:99:99')        -
         HEADER('Process ')        ON(21,8,CH)                       -
         HEADER('Procnum ')        ON(29,4,BI)                       -
         HEADER('CondCode')        ON(49,4,BI)                       -
         HEADER('CD.Node ')        ON(33,16,CH)
 DISPLAY FROM(OUTDD1)    LIST(OUTDD3)                                -
         TITLE('Daily C:D Error Message Report')                     -
         DATE(DMY-)                                                  -
         TIME(24:)                                                   -
         PAGE                                                        -
         BLANK                                                       -
         BTITLE('Report for error message: ') BREAK(5,8,CH)          -
         HEADER('Error Message')   ON(5,8,CH)                        -
         HEADER('Date    ')        ON(1,4,PD,E'9999.999')            -
         HEADER('Time    ')        ON(13,8,ZD,E'99:99:99:99')        -
         HEADER('Process ')        ON(21,8,CH)                       -
         HEADER('Procnum ')        ON(29,4,BI)                       -
         HEADER('CondCode')        ON(49,4,BI)                       -
         HEADER('CD.Node ')        ON(33,16,CH)
 OCCUR   FROM(OUTDD1)    LIST(OUTDD4) BLANK                          -
         TITLE('Error Message Summary')                              -
         HEADER('Error Message')                                     -
         HEADER('Occurrences')                                       -
         ON(5,8,CH)                                                  -
         ON(VALCNT)
 COPY    FROM(OUTDD4) TO(OUTDD2)   USING(SRT2)
/*
//
